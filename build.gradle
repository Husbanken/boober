buildscript {
  ext.kotlin_version = '1.1.1'
  ext.springBootVersion = '1.5.2.RELEASE'

  repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
  }

  dependencies {
    classpath(
        "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version",
        "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version",
        "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version",

        "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion",
        'no.skatteetaten.aurora.gradle.plugins:aurora-gradle-plugin:feature_AOS_1064_opensource_gradle_plugins-SNAPSHOT',
        'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1',
        'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.11',
        'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3',
    )
  }
}

repositories {
  mavenCentral()
//  mavenLocal()
}

ext.snippetsDir = file("$buildDir/docs/generated-snippets")
ext.aurora = [
    applyNexusRepositories: false
]

apply plugin: 'no.skatteetaten.plugins.aurora'
apply plugin: 'org.sonarqube'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
//apply plugin: "jacoco"
apply plugin: "info.solidsoft.pitest"
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'

distZip.classifier = 'Leveransepakke'


compileKotlin {
  kotlinOptions {
    suppressWarnings = true
    jvmTarget = 1.8
  }
}

compileTestKotlin.dependsOn = compileTestKotlin.taskDependencies.values - 'compileTestJava'
compileTestGroovy.dependsOn compileTestKotlin
compileTestGroovy.classpath += files(compileTestKotlin.destinationDir)
testClasses.dependsOn compileTestGroovy

group = 'no.skatteetaten.aurora'

sourceCompatibility = '1.8'

//plugin
pitest {
  outputFormats = ['XML', 'HTML']
}

dependencies {
  compile(
      "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",
      "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
      "org.springframework.boot:spring-boot-starter-web",
      "org.springframework.boot:spring-boot-starter-actuator",
      "org.springframework.boot:spring-boot-starter-hateoas",
      "org.springframework.boot:spring-boot-starter-security",
//      "ske.aurora.springboot.prometheus:spring-boot-prometheus:3.1.2",
//      'com.ryantenney.metrics:metrics-spring:3.1.2',
      "com.fasterxml.jackson.module:jackson-module-kotlin:2.8.7",
      'org.eclipse.jgit:org.eclipse.jgit:4.6.1.201703071140-r',
      'org.apache.velocity:velocity:1.7',
      'com.github.martinwithaar:encryptor4j:0.1')

  testCompile(
      "org.codehaus.groovy:groovy-all:2.4.4",
      "org.spockframework:spock-core:1.1-groovy-2.4-rc-3",
      "org.spockframework:spock-spring:1.1-groovy-2.4-rc-3",
      "org.springframework.boot:spring-boot-starter-test",
      "cglib:cglib-nodep:3.1",
      "org.objenesis:objenesis:2.1",
      "org.springframework.restdocs:spring-restdocs-mockmvc:1.1.0.RELEASE",
      "org.springframework.security:spring-security-test",
  )
}


//plugin skru på med appConfig hvis man har asciidoctor på classpath?
asciidoctor {
  attributes([
      snippets: snippetsDir,
      version : version
  ])
  inputs.dir snippetsDir
  outputDir "$buildDir/asciidoc"
  dependsOn test
  sourceDir 'src/main/asciidoc'
}

//plugin skru på med appConfig
jar {
  dependsOn asciidoctor
  from("${asciidoctor.outputDir}/html5") {
    into 'static/docs'
  }
}

//plugin
/*
jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.destination "${buildDir}/reports/jacoco"
  }
}
*/

task wrapper(type: Wrapper) {
  gradleVersion = '3.4.1'
}

